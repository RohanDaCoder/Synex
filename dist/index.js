

;await (async()=>{
  'use strict';
// --- CommandKit require() polyfill ---
  if (typeof require === "undefined") {
    const { createRequire } = await import("node:module");
    const __require = createRequire(import.meta.url);
    Object.defineProperty(globalThis, "require", {
      value: (id) => {
        return __require(id);
      },
      configurable: true,
      enumerable: false,
      writable: true,
    });
  }
// --- CommandKit require() polyfill ---
// --- CommandKit Anti-Crash Monitor ---
  // 'uncaughtException' event is supposed to be used to perform synchronous cleanup before shutting down the process
  // instead of using it as a means to resume operation.
  // But it exists here due to compatibility reasons with discord bot ecosystem.
  const p = (t) => `\x1b[33m${t}\x1b[0m`, b = '[CommandKit Anti-Crash Monitor]', l = console.log, e1 = 'uncaughtException', e2 = 'unhandledRejection';
  if (!process.eventNames().includes(e1)) // skip if it is already handled
    process.on(e1, (e) => {
      l(p(`${b} Uncaught Exception`)); l(p(b), p(e.stack || e));
    })
  if (!process.eventNames().includes(e2)) // skip if it is already handled
    process.on(e2, (r) => {
      l(p(`${b} Unhandled promise rejection`)); l(p(`${b} ${r.stack || r}`));
    });
// --- CommandKit Anti-Crash Monitor ---

})();



/* Optimized production build generated by CommandKit */

// src/index.ts
import "dotenv/config";
import { Client, IntentsBitField } from "discord.js";
import { CommandKit } from "commandkit";
import { join, dirname } from "node:path";
import { fileURLToPath } from "node:url";
var __dirname = dirname(fileURLToPath(import.meta.url));
var client = new Client({
  intents: [
    IntentsBitField.Flags.Guilds,
    IntentsBitField.Flags.GuildMembers,
    IntentsBitField.Flags.GuildMessages,
    IntentsBitField.Flags.MessageContent
  ]
});
new CommandKit({
  client,
  eventsPath: join(__dirname, "events"),
  commandsPath: join(__dirname, "commands")
});
client.login(process.env.TOKEN);
